import cv2
import numpy as np
from datetime import datetime
from fpdf import FPDF
import tempfile
import os
import base64
from PIL import Image

class PPE_Reporter:
    def __init__(self):
        self.logo_path = self._get_base64_logo()
        self.template = self._load_template()
    
    def _get_base64_logo(self):
        # Create a simple logo (replace with your actual logo)
        logo = np.zeros((100, 300, 3), dtype=np.uint8)
        cv2.putText(logo, "SAFETY INSPECTOR", (10, 50), 
                   cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
        _, buffer = cv2.imencode('.png', logo)
        return base64.b64encode(buffer).decode('utf-8')
    
    def _load_template(self):
        return {
            'title': "PPE Compliance Report",
            'subtitle': "Generated by Safety Inspection System",
            'footer': "Â© 2024 Safety Inspector - All Rights Reserved",
            'required_ppe': ["Helmet", "Safety Vest", "Gloves", "Safety Boots"]
        }
    
    def generate_pdf_report(self, image_path, missing_items, detection_data):
        """Generate a comprehensive PDF report"""
        pdf = FPDF()
        pdf.add_page()
        
        # Header
        pdf.set_font('Arial', 'B', 16)
        pdf.cell(0, 10, self.template['title'], 0, 1, 'C')
        pdf.set_font('Arial', 'I', 12)
        pdf.cell(0, 10, self.template['subtitle'], 0, 1, 'C')
        pdf.ln(10)
        
        # Report metadata
        pdf.set_font('Arial', '', 12)
        pdf.cell(0, 10, f"Report Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", 0, 1)
        pdf.cell(0, 10, f"Inspection ID: {datetime.now().strftime('%Y%m%d%H%M%S')}", 0, 1)
        pdf.ln(5)
        
        # Compliance status
        pdf.set_font('Arial', 'B', 14)
        status = "FULL COMPLIANCE" if not missing_items else "SAFETY VIOLATION"
        color = (0, 128, 0) if not missing_items else (255, 0, 0)
        pdf.set_text_color(*color)
        pdf.cell(0, 10, f"Status: {status}", 0, 1)
        pdf.set_text_color(0, 0, 0)
        pdf.ln(5)
        
        # Detection image
        if os.path.exists(image_path):
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 10, "Detection Results:", 0, 1)
            pdf.image(image_path, x=10, w=190)
            pdf.ln(10)
        
        # PPE Requirements section
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, "Required PPE Equipment:", 0, 1)
        pdf.set_font('Arial', '', 12)
        for item in self.template['required_ppe']:
            pdf.cell(0, 10, f"- {item}", 0, 1)
        pdf.ln(5)
        
        # Missing items section
        if missing_items:
            pdf.set_font('Arial', 'B', 12)
            pdf.cell(0, 10, "Missing Safety Equipment:", 0, 1)
            pdf.set_font('Arial', '', 12)
            for item in missing_items:
                pdf.cell(0, 10, f"- {item.title()}", 0, 1)
            pdf.ln(5)
        
        # Detection details
        pdf.set_font('Arial', 'B', 12)
        pdf.cell(0, 10, "Detection Details:", 0, 1)
        pdf.set_font('Arial', '', 12)
        for item, count in detection_data.items():
            pdf.cell(0, 10, f"- {item.title()}: {count}", 0, 1)
        
        # Footer
        pdf.ln(15)
        pdf.set_font('Arial', 'I', 10)
        pdf.cell(0, 10, self.template['footer'], 0, 0, 'C')
        
        # Save to temporary file
        temp_pdf = tempfile.NamedTemporaryFile(suffix=".pdf", delete=False)
        pdf_path = temp_pdf.name
        pdf.output(pdf_path)
        return pdf_path
    
    def generate_html_report(self, image_path, missing_items, detection_data):
        """Generate an interactive HTML report"""
        status = "FULL COMPLIANCE" if not missing_items else "SAFETY VIOLATION"
        status_color = "green" if not missing_items else "red"
        
        # Convert image to base64 for HTML embedding
        with open(image_path, "rb") as img_file:
            img_base64 = base64.b64encode(img_file.read()).decode('utf-8')
        
        html = f"""
        <html>
        <head>
            <title>PPE Compliance Report</title>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 40px; }}
                .header {{ text-align: center; margin-bottom: 30px; }}
                .logo {{ height: 80px; }}
                .status {{ color: {status_color}; font-weight: bold; font-size: 1.2em; }}
                .section {{ margin-bottom: 20px; border-bottom: 1px solid #eee; padding-bottom: 20px; }}
                .image-container {{ text-align: center; margin: 20px 0; }}
                .detection-image {{ max-width: 100%; box-shadow: 0 0 10px rgba(0,0,0,0.1); }}
                .missing-item {{ color: red; font-weight: bold; }}
                .footer {{ margin-top: 40px; text-align: center; font-style: italic; color: #666; }}
                .requirements-table {{ width: 100%; border-collapse: collapse; }}
                .requirements-table th, .requirements-table td {{ padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }}
                .requirements-table th {{ background-color: #f2f2f2; }}
                .compliant {{ color: green; }}
                .non-compliant {{ color: red; }}
            </style>
        </head>
        <body>
            <div class="header">
                <img src="data:image/png;base64,{self.logo_path}" class="logo">
                <h1>PPE Compliance Report</h1>
                <p>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <div class="section">
                <h2>Inspection Summary</h2>
                <p>Status: <span class="status">{status}</span></p>
                <p>Inspection ID: {datetime.now().strftime('%Y%m%d%H%M%S')}</p>
            </div>
            
            <div class="section">
                <h2>Detection Results</h2>
                <div class="image-container">
                    <img src="data:image/png;base64,{img_base64}" class="detection-image">
                </div>
            </div>
            
            <div class="section">
                <h2>PPE Requirements Compliance</h2>
                <table class="requirements-table">
                    <tr>
                        <th>Equipment</th>
                        <th>Status</th>
                        <th>Count</th>
                    </tr>
        """
        
        for item in self.template['required_ppe']:
            item_lower = item.lower()
            if item_lower in detection_data:
                status_class = "compliant"
                status_text = "Present"
                count = detection_data[item_lower]
            else:
                status_class = "non-compliant"
                status_text = "Missing"
                count = 0
            
            html += f"""
                    <tr>
                        <td>{item}</td>
                        <td class="{status_class}">{status_text}</td>
                        <td>{count}</td>
                    </tr>
            """
        
        html += """
                </table>
            </div>
            
            <div class="section">
                <h2>Detailed Findings</h2>
                <h3>All Detected Items:</h3>
                <ul>
        """
        
        for item, count in detection_data.items():
            html += f"<li>{item.title()}: {count}</li>"
        
        if missing_items:
            html += """
                </ul>
                <h3>Missing Items:</h3>
                <ul>
            """
            for item in missing_items:
                html += f'<li class="missing-item">{item.title()}</li>'
        
        html += f"""
                </ul>
            </div>
            
            <div class="footer">
                <p>{self.template['footer']}</p>
            </div>
        </body>
        </html>
        """
        
        temp_html = tempfile.NamedTemporaryFile(suffix=".html", delete=False)
        html_path = temp_html.name
        with open(html_path, 'w') as f:
            f.write(html)
        return html_path
    
    def generate_report(self, output_frame, missing_items, detected_items, report_format='pdf'):
        """Main function to generate reports"""
        # Save detection image temporarily
        img_path = tempfile.NamedTemporaryFile(suffix=".png", delete=False).name
        cv2.imwrite(img_path, cv2.cvtColor(output_frame, cv2.COLOR_RGB2BGR))
        
        if report_format.lower() == 'pdf':
            report_path = self.generate_pdf_report(img_path, missing_items, detected_items)
            mime_type = 'application/pdf'
        else:
            report_path = self.generate_html_report(img_path, missing_items, detected_items)
            mime_type = 'text/html'
        
        # Clean up temporary image
        os.unlink(img_path)
        
        return report_path, mime_type